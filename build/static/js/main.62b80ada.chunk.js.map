{"version":3,"sources":["components/Header.jsx","components/ListItems.jsx","components/SelectedItems.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","ListItems","console","log","list","this","props","checkedItems","Object","keys","map","_","key","Fragment","__","id","type","checked","some","item","onChange","e","handleChecked","for","name","SelectedItems","r","indexOf","includes","onClick","App","state","filter","push","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"i2BAGqBA,G,qLAEb,OACI,yBAAKC,UAAU,2BACX,yBAAKA,UAAU,YACX,qCAEJ,yBAAKA,UAAU,YACX,4BACI,oCACA,4CACA,uCACA,mD,GAZYC,IAAMC,Y,QCArBC,E,uKACP,IAAD,OAEL,OADAC,QAAQC,IAAIC,EAAMC,KAAKC,MAAMC,cAEzB,yBAAKT,UAAU,kBACVU,OAAOC,KAAKL,GAAMM,KAAI,SAACC,EAAGC,GAAJ,OACnB,kBAAC,IAAMC,SAAP,CAAgBD,IAAKA,GACjB,4BAAKD,GACJP,EAAKO,GAAGD,KAAI,SAAAI,GAAE,OACX,yBAAKhB,UAAU,yBAAyBc,IAAKE,EAAGC,IAC5C,2BAAOC,KAAK,WAAWD,GAAID,EAAGC,GAAIE,QAAS,EAAKX,MAAMC,aAAaW,MAAK,SAAAC,GAAI,OAAIA,IAASL,EAAGC,MAAKK,SAAU,SAACC,GAAD,OAAO,EAAKf,MAAMgB,cAAcR,EAAGC,OAC9I,2BAAOQ,IAAKT,EAAGC,GAAIjB,UAAU,gBAAgBgB,EAAGU,mB,GAXzCzB,IAAMC,WCAxByB,E,uKACP,IAAD,OACL,OACI,yBAAK3B,UAAU,mBACVU,OAAOC,KAAKL,GAAMM,KAAI,SAACC,EAAGC,GAAJ,OACnB,kBAAC,IAAMC,SAAP,CAAgBD,IAAKA,GACfR,EAAKO,GAAGO,MAAK,SAAAQ,GAAC,OAAI,EAAKpB,MAAMC,aAAaoB,QAAQD,EAAEX,KAAO,MAAM,4BAAKJ,GACvEP,EAAKO,GAAGD,KAAI,SAACI,GAAD,OACT,EAAKR,MAAMC,aAAaqB,SAASd,EAAGC,IAAM,yBAAKjB,UAAU,iBAAiBc,IAAKE,EAAGC,IAAxC,IAA6C,wBAAIjB,UAAU,aAAagB,EAAGU,KAA9B,IAAoC,2BAAOK,QAAS,SAACR,GAAD,OAAO,EAAKf,MAAMgB,cAAcR,EAAGC,MAAnD,YAAsF,e,GARlMhB,IAAMC,WCG5B8B,E,4MACnBC,MAAQ,CACNxB,aAAc,I,EAEhBe,cAAgB,SAACP,GACfb,QAAQC,IAAI,qBAAsBY,GAClC,IAAIR,EAAY,YAAO,EAAKwB,MAAMxB,cAC7BA,EAAaqB,SAASb,GAIzBR,EAAeA,EAAayB,QAAO,SAAArB,GAAC,OAAIA,IAAMI,KAH9CR,EAAa0B,KAAKlB,GAKpB,EAAKmB,SAAS,CAAE3B,kB,uDAIhB,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAWS,aAAcF,KAAK0B,MAAMxB,aAAce,cAAejB,KAAKiB,gBACtE,kBAAC,EAAD,CAAef,aAAcF,KAAK0B,MAAMxB,aAAce,cAAejB,KAAKiB,uB,GAvBrDvB,IAAMC,WCMnBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.62b80ada.chunk.js","sourcesContent":["import { render } from '@testing-library/react';\nimport React, { Component } from 'react';\n\nexport default class Header extends React.Component {\n    render() {\n        return (\n            <div className=\"header-container row m0\">\n                <div className=\"col-md-6\">\n                    <h3>LOGO</h3>\n                </div>\n                <div className=\"col-md-6\">\n                    <ul>\n                        <li>Home</li>\n                        <li>My Portfolio</li>\n                        <li>Clients</li>\n                        <li>Get In Touch</li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport list from '../constant/list.json'\n\nexport default class ListItems extends React.Component {\n    render() {\n        console.log(list, this.props.checkedItems)\n        return (\n            <div className=\"left-container\">\n                {Object.keys(list).map((_, key) => (\n                    <React.Fragment key={key}>\n                        <h5>{_}</h5>\n                        {list[_].map(__ => (\n                            <div className=\"list-container d-block\" key={__.id}>\n                                <input type=\"checkbox\" id={__.id} checked={this.props.checkedItems.some(item => item === __.id)} onChange={(e) => this.props.handleChecked(__.id)} />\n                                <label for={__.id} className=\"list-item m0\">{__.name}</label>\n                            </div>\n                        ))}\n                    </React.Fragment>\n                ))}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport list from '../constant/list.json'\n\nexport default class SelectedItems extends React.Component {\n    render() {\n        return (\n            <div className=\"right-container\">\n                {Object.keys(list).map((_, key) => (\n                    <React.Fragment key={key}>\n                        { list[_].some(r => this.props.checkedItems.indexOf(r.id) >= 0) && <h4>{_}</h4>}\n                        {list[_].map((__) => (\n                            this.props.checkedItems.includes(__.id) ? <div className=\"list-container\" key={__.id}> <li className=\"list-item\">{__.name} <label onClick={(e) => this.props.handleChecked(__.id)}>&#x2715;</label></li></div> : \"\"\n                        ))}\n                    </React.Fragment>\n                ))}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport ListItems from './components/ListItems';\nimport SelectedItems from './components/SelectedItems';\n\nexport default class App extends React.Component {\n  state = {\n    checkedItems: []\n  }\n  handleChecked = (id) => {\n    console.log(\" in handle checked\", id)\n    let checkedItems = [...this.state.checkedItems]\n    if (!checkedItems.includes(id)) {\n      checkedItems.push(id)\n    }\n    else {\n      checkedItems = checkedItems.filter(_ => _ !== id)\n    }\n    this.setState({ checkedItems })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"body-container\">\n          <div className=\"cards\">\n            <ListItems checkedItems={this.state.checkedItems} handleChecked={this.handleChecked} />\n            <SelectedItems checkedItems={this.state.checkedItems} handleChecked={this.handleChecked} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}